10/20/2020
	SDK using for project -> .NET core
		includes dotnet CLI, libraries, and runtime

	CLI: common language infrasructure
		can write code in C#, f#, or VB
		all languages have specific compilers:
			c# -> csc
			f# -> fsc
			VB -> vbc
		command to compile code: dotnet build
			code compiled into CIL/MSEL (common intermediate language) (equivalent to JVM in java)
			this makes it platform independant
			has entity called runtime that loads and executes managed assembly code

--------------------------------------------------------------------------------------------------------

	Assembly vs Namespace
		Namespace:
			logically arrange the types (classes) to avoid naming conflicts
		Assembly:
			physical separation of types (classes)
			in the from of .exe or .dll
				exe: executable
					has main method
					actual application
				dll: dynamic linked library
					does not have main method in class
					deployable units

--------------------------------------------------------------------------------------------------------

	CTS: Common Type System
		used by the CLR to enforce strict typing and code verification
		ensures common mapping for types across different languages

	C#		CTS 			VB 			xyz (random new language)
	int 	System.Int32	integer		doo
	short	System.Int16	foo			zoo

	C# -> TypeSafe language, Case sensitive

--------------------------------------------------------------------------------------------------------

Typical Applicaitons layers:
	UI -> user interface
	BL -> business logic
	DB -> database

	Tiers: physical seperation of the layers
	layers: logical seperation of the code

	1-tier applications: all layers contained onto one machine
	2-tier applications: think client-server architecture
	3(N)-tier applications: seperate the UI, BL, and DB into separate servers
		-> complex enterprise level applications

--------------------------------------------------------------------------------------------------------

Solution file:
	collection of projects
	helps logically group code together
		ex: model, tests, business logic, logging, services

	HeroesApp -> Solution		{mkdir <sln name>}
								{dotnet new sln} -> make sure you have sln directory ready

		- UI -> console 		{dotnet new console -o <project name>} 
								{dotnet sln <sln name> add <referebnce to console project>}

		- BL -> class library	{dotnet new classLib -o <project name>}
								{dotnet sln <sln name> add <referebnce to console project>}

		- DL -> class library	{dotnet new classLib -o <project name>}
								{dotnet sln <sln name> add <referebnce to console project>}

		- TEST -> xUnit 		{dotnet new xUnit -o <project name>}
								{dotnet sln <sln name> add <referebnce to console project>}

--------------------------------------------------------------------------------------------------------

C# 
Namespace
	Types
		Members (methods, variables, properties)

data types (classes, enums, structs, interface, delegates):
	all types in C# are inherited directly or indrectly by System.Object
	value types: 
		contains the direct value
		stored in the stack
		fast to access
		ex:
			structs + enums
			predefined: int, long, short, byte, DateTime, Char
	reference types:
		stores reference to that value
		value stored in heap
		expensive to retrieval process
		ex:
			classes + interfaces + delegates
			predefined: string, array, collections

Access Modifiers: change behavior of the types or type members
	Scopes Modifiers: 
		private: 			only accessible within class
		public: 			accessible anywhere
		internal: 			only accessible within assembly
		protected: 			only accessible within child classes
		protected internal: accessible from current assembly or from child classes
		private protected: 	accessible from child classes within current assembly

		using scope modifiers encapsulation is achieved
	Extended modifiers:
		abstract:	thing being modified has missing or incomplete implementation
					inteded to be a base class of other classes
					not instantiated on their own, meant to be inherited
		virtual:	used to modify a method, property, indexer, or event and allow it to be overridden
		sealed:		prevents inheritence
					precents an overriding method from being overridden by a more derived method
		static:		members: belong to the class type itself rather than the specifc object instance
							 cannot use {this} to refernce static methods and property accessors
							 referenced through the type name
					classes: cannot be instantiated
							 all members must be static
							 just a container for static members
		const:		const fields and locals aren't variables
					may not be modified
					can be numbers, Boolean, strings, or null
					only reference type that can be const are string and null
		readonly:	initialization can only occur as part of the declaration or in a constructor in the same class
		overrride:	members: provide new implementation of inherited method
							 must have the same signature as the inherited method
							 both methods must be virtual, abstract, or override
					classes: required to extend or modify the abstract or virtual implementation on an inherited method
		partial:	split the definition of a class, a struct, an interface, or a method over two or more source files
					each source file contains a section, all parts are combined on compilation
					when would you do this?
						working with automatically generated source code can be added to the class without having to recreate the source file

	Default modifiers:
		for class 			 -> internal
		for members of class -> private

Properties: like getters/setters in Java
	smart fields to encapsulate private members

Collections: In memory storage of data
	Arrays: 1-D, 2-D, jagged arrays and multi-dimensional
		drawbacks:
			size of array
			memory inefficient (size must be predefined)
	generics: stack<T>, queue<T>, list<T>, dictionary<TKey, TValue>
		benefits:
			type-safe classes
			memory efficient (don't need to mention size)
